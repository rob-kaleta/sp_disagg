# When supplied with a folder containing rasters, a bounding area (country/district etc.), resolution and CRS
# this function will create an empty raster,load all rasters folder, reproject, crop and stack them. 
process_rasters<-function(raster_folder, out_folder, study_area = area){
  # start check
  # defined<-ls(sorted=FALSE)
  # passed<-names(as.list(match.call())[-1])
  # if (any(!defined %in% passed)) {
  #   stop(paste("missinge values for",paste(setdiff(defined,passed),collapse=",")))
  # }
  # end check
  rasters_list<-list.files(raster_folder,recursive = TRUE, pattern="*.grd$",ignore.case = TRUE,full.names=TRUE)
  print(rasters_list)
  rast_out <- lapply(rasters_list,function(raster_in){
      rast <- raster(raster_in)
      #print(rast)
    # if TRUE then raster is categorical and interp is set to nearest neighbour else raster is cotinuous and interp set to bilinear  
    if (floor(maxValue(rast))==maxValue(rast) & is.factor(rast)==TRUE){
      interp<-"ngb"
    } 
    else  {
      interp<-"bilinear"
    }
    # main body of function
      
      #empty_raster<-raster(area,res=resolution,crs = crs)
      print(paste("Interpolation method : ",interp))
      print(paste("Processing raster",which(rasters_list == raster_in),"out of",length(rasters_list),":",names(rast)))
      projectRaster(rast,r,method=interp)%>%
      crop(proj_ext)%>%
      mask(study_area) %>% 
      writeRaster(paste0(output_folder,"/",area_name,"_",names(rast),".grd"), overwrite = TRUE)
  }
  )
}

